#include <GL/gl.h>
#include <GL/glut.h>
#include <GL/glu.h>
#include<stdio.h>
#include<math.h>
#include<iostream>
using namespace std;
#include<windows.h>
#include<mmsystem.h>
float xRotated = 90.0, yRotated = 0.0, zRotated = 0.0;
float angle1= 0, angle2=0, angle3=0, angle4=0, angle5=0, angle6=0, angle7=0, angle8=0;
float x,y,i;
float PI=3.1416;
int refreshmill=1000/60;

//------------------------------  timerFunction  ---------------------------------
void timer(int)
{
    glutPostRedisplay();
    glutTimerFunc(refreshmill, timer, 0);
     angle1 += 0.003;
     angle2 += 0.002;
     angle3 += 0.001;
     angle4 += 0.0009;
     angle5 += 0.0007;
     angle6 += 0.0004;
     angle7 += 0.0003;
     angle8 += 0.0001;

}
//------------------------------  reshapeFunction  ---------------------------------

void reshapeFunc (int x, int y)
{
    glMatrixMode (GL_PROJECTION);
    glLoadIdentity();

    gluPerspective (40.0, (GLdouble)x / (GLdouble)y, 0.5, 20.0);
    glMatrixMode   (GL_MODELVIEW);
    glViewport     (0, 0, (GLsizei)x, (GLsizei)y);
}
//-------------------------Function for Key zooming--------------------------------------

double rotate_by_key=0;

double rotate_x=0.5;

void keyPress(int key,int x,int y)
{

    if(key==27)
          exit(0);
    if (key == GLUT_KEY_UP)
            rotate_x += .05;
        if (key == GLUT_KEY_DOWN)
            rotate_x -= .05;

    glutPostRedisplay();

}

//------------------------------  Draw_Spheres   -------------------------------

void Draw_Spheres (void)
{

    glMatrixMode   (GL_MODELVIEW);
    glClear        (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity ();
    glTranslatef    (0.0, 0.0, -15.0);


  //-----------------------------------------------------------

   float x, y;
    int i;
    GLfloat radius;
    int triangleAmount =40;
    GLfloat twicePi = 2.0 * PI;
//---------------------Key Input Handling to Zoom in&out--------------------------------------

     glScalef( rotate_x,rotate_x,1.0f );
    //g lScale f(1.0f,1.0f,rotate_x);
    glRotatef(  rotate_by_key,-1.0f, 1.5f, -5.0f );

//----------------------asteroid1-------------------------------------

    glPushMatrix();
    glTranslatef(-7.0,-5.0,-4.5);
    
    glColor3f(1.0, 1.0, 1.0);
    // changing in transformation matrix.
    // rotation about X axis
    glRotatef(xRotated,1.0,0.0,0.0);
    // rotation about Y axis
    glRotatef(yRotated,0.0,1.0,0.0);
    // rotation about Z axis
    glRotatef(zRotated,0.0,0.0,1.0);
    // scaling transformation
    glScalef(1.0,1.0,0.6);
    
    glutSolidIcosahedron();
    
    glPopMatrix ();
//------------------------asteroid2-----------------------------------
    glPushMatrix();
    glTranslatef(-10.0,-7.0,-4.5);

    glColor3f(1.0, 1.1, 1.3);
    // changing in transformation matrix.
    // rotation about X axis
    glRotatef(xRotated,1.0,0.0,0.0);
    // rotation about Y axis
    glRotatef(yRotated,0.0,1.0,0.0);
    // rotation about Z axis
    glRotatef(zRotated,0.0,0.0,1.0);
    // scaling transformation
    glScalef(1.0,1.0,0.4);


    glutSolidDodecahedron();
    glPopMatrix ();



//----------------------SPACECFRAT---------------------------------
//top pyramid(manual drawing)
 glPushMatrix();
int degree =10;
    glTranslatef(8.0,6.2,-4.5);
    glRotatef(degree, 10.0f, 10.0f, 0.0f);
	 glBegin(GL_TRIANGLES);           // Begin drawing the pyramid with 4 triangles
      // Front
      glColor3f(1.0f, 0.0f, 0.0f);
      glVertex3f( 0.0f, 0.3f, 0.0f);
      glVertex3f(-0.3f, -0.3f, 0.3f);
      glVertex3f(0.3f, -0.3f, 0.3f);

      // Right
      glColor3f(0.3f, 0.0f, 0.0f);
      glVertex3f(0.0f, 0.3f, 0.0f);
      glVertex3f(0.3f, -0.3f, 0.3f);
      glVertex3f(0.3f, -0.3f, -0.3f);

      // Back
      glColor3f(0.3f, 0.0f, 0.0f);
      glVertex3f(0.0f, 0.3f, 0.0f);
      glColor3f(0.0f, 0.3f, 0.0f);
      glVertex3f(0.3f, -0.3f, -0.3f);
      glColor3f(0.0f, 0.0f, 0.3f);
      glVertex3f(-0.3f, -0.3f, -0.3f);

      // Left
      glColor3f(0.3f,0.0f,0.0f);
      glVertex3f( 0.0f, 0.3f, 0.0f);
      glVertex3f(-0.3f,-0.3f,-0.3f);
      glVertex3f(-0.3f,-0.3f, 0.3f);
     glEnd();   // Done drawing the pyramid
    glPopMatrix ();



    glPushMatrix();
    
    glTranslatef(8.0,5.0,-4.5);
    
    glColor3f(0.87, 0.12, 0.1);
    // changing in transformation matrix.
    // rotation about X axis
    glRotatef(xRotated,1.0,0.0,0.0);
    // rotation about Y axis
    glRotatef(yRotated,0.0,1.0,0.0);
    // rotation about Z axis
    glRotatef(zRotated,0.0,0.0,1.0);
    // scaling transformation
    glScalef(1.0,1.0,1.0);
    
    glutWireSphere(1.0,100,100);
    
    glPopMatrix ();


    glPushMatrix();
    
    glTranslatef(8.0,4.2,-4.5);
    
    glColor3f(0.87, 0.12, 0.1);
    // changing in transformation matrix.
    // rotation about X axis
    glRotatef(xRotated,1.0,0.0,0.0);
    // rotation about Y axis
    glRotatef(yRotated,0.0,1.0,0.0);
    // rotation about Z axis
    glRotatef(zRotated,0.0,0.0,1.0);
    // scaling transfomation
    glScalef(1.0,1.0,1.0);

    glutSolidTorus(0.4,0.8,10,80);
    
    glPopMatrix ();

    // Pyramid using manual drawing (the down part of spacecraft)
    glPushMatrix();
    glTranslatef(8.0,4.0,-4.5);
    glRotatef(degree, 10.0f, 10.0f, 0.0f);
	 glBegin(GL_TRIANGLES);           // Begin drawing the pyramid with 4 triangles
      // Front
      glColor3f(1.0f, 0.0f, 0.0f);     
      glVertex3f( 0.0f, 1.0f, 0.0f);
      glVertex3f(-1.0f, -1.0f, 1.0f);
      glVertex3f(1.0f, -1.0f, 1.0f);

      // Right
      glColor3f(1.0f, 0.0f, 0.0f);     
      glVertex3f(0.0f, 1.0f, 0.0f);
      glVertex3f(1.0f, -1.0f, 1.0f);
      glVertex3f(1.0f, -1.0f, -1.0f);

      // Back
      glColor3f(1.0f, 0.0f, 0.0f);     
      glVertex3f(0.0f, 1.0f, 0.0f);
      glColor3f(0.0f, 1.0f, 0.0f);     
      glVertex3f(1.0f, -1.0f, -1.0f);
      glColor3f(0.0f, 0.0f, 1.0f);     
      glVertex3f(-1.0f, -1.0f, -1.0f);

      // Left
      glColor3f(1.0f,0.0f,0.0f);       
      glVertex3f( 0.0f, 1.0f, 0.0f);
      glVertex3f(-1.0f,-1.0f,-1.0f);
      glVertex3f(-1.0f,-1.0f, 1.0f);
     glEnd();   // Done drawing the pyramid

    glPopMatrix ();
//-----------------------------------------------------------





//------------------SUN & PLANETS-----------------------------------------



   glColor3f (0.8, 0.2, 0.1);              // SUN
    glPushMatrix ();
       glTranslatef    (-12.5, 0.0, 0.0);
       glRotatef       (60.0, 1,0,0);
       glRotatef       (zRotated*6.0, 0,0,1);
       glutSolidSphere (4.0, 1800, 1800);
    glPopMatrix ();


//-----------------------------------------------------------
     glColor3f (3.1, 1.2, 0.8);              // MERCURY
    glPushMatrix ();
       glTranslatef    (-7.0, 0.0+angle1, 0.0+angle1);
       glRotatef       (60.0, 1,0,0);
       glRotatef       (zRotated, 0,0,1);
       glutSolidSphere (0.2, 20, 50);
    glPopMatrix ();


//-----------------------------------------------------------
     glColor3f (0.9, 0.12, 0.2);              // VENUS
    glPushMatrix ();
       glTranslatef    (-5.5, 0.0+angle2, 0.0+angle2);
       glRotatef       (60.0, 1,0,0);
       glRotatef       (zRotated, 0,0,1);
       glutSolidSphere (0.6, 20, 50);
    glPopMatrix ();


//-----------------------------------------------------------
    glColor3f (1.0, 4.0, 5.0);              // EARTH
    glPushMatrix ();
       glTranslatef    (-3.5, 0.0+angle3, 0.0+angle3);
       glRotatef       (60.0, 1,0,0);
       glRotatef       (zRotated, 0,0,1);
       glutSolidSphere (0.7, 20, 50);
    glPopMatrix ();


//-----------------------------------------------------------

    glColor3f (0.8, 0.2, 0.3);              // MARS
    glPushMatrix ();
       glTranslatef    (-1.5, -0.8+angle4, 0.0+angle4);
       glRotatef       (60.0, 1,0,0);
       glRotatef       (zRotated, 0,0,1);
       glutSolidSphere (0.35, 20, 50);
    glPopMatrix ();

//-----------------------------------------------------------
    glColor3f (7.1, 4.2, -6.8);              // JUPITER
    glPushMatrix ();
       glTranslatef    (1.0, 1.7+angle5, 0.0+angle5);
       glRotatef       (60.0, 1,0,0);
       glRotatef       (zRotated, 0,0,10);
       glutSolidSphere (1.3, 20, 50);
    glPopMatrix ();
//-----------------------------------------------------------

    glColor3f (6.1, 3.2, 0.8);              // SATURN
    glPushMatrix ();
       glTranslatef    (4.0, -0.8, 0.0);
       glRotatef       (60.0, 1,0,0);
       glRotatef       (zRotated, 0,0,1);
       glutSolidSphere (1.0, 20, 50);
    glPopMatrix ();
//-----------------------------------------------------------

    glColor3f (0.1, 9.2, 8.8);              // URANUS
    glPushMatrix ();
       glTranslatef    (6.8, 0.3+angle7, 0.0+angle7);
       glRotatef       (60.0, 1,0,0);
       glRotatef       (zRotated, 0,0,1);
       glutSolidSphere (0.85, 20, 50);
    glPopMatrix ();

//-----------------------------------------------------------
    glColor3f (0.9, 0.2, 0.1);              // NEPTUNE
    glPushMatrix ();
       glTranslatef    (9.3, 0.5+angle8, 0.0+angle8);
       glRotatef       (60.0, 1,0,0);
       glRotatef       (zRotated, 0,0,1);
       glutSolidSphere (0.75, 20, 50);
    glPopMatrix ();

//-----------------------------------------------------------
     glPushMatrix ();     //SATURN TORUS
    glTranslatef(4.0,-0.8,0.0);
    
    glColor3f(1.5, 1.2, 0.4);
    // changing in transformation matrix.
    // rotation about X axis
    glRotatef(xRotated,1.0,0.0,0.3);
    // rotation about Y axis
    glRotatef(yRotated,0.0,1.0,0.0);
    // rotation about Z axis
    glRotatef(zRotated,0.0,0.0,1.0);
    // scaling transformation
    glScalef(1.0,1.0,1.0);
   
    glutSolidTorus(0.13,1.5,50,50);
    
    glPopMatrix ();

//-----------------------------------------------------------


//--------------------------------The Belt of Orion-------------------------------------------

//--------------------SMALL CIRCLES1---------------------------------------
//--------------------SMALL CIRCLES1---------------------------------------



     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-0.9; y=-1.2; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.0, 1.0, 0.0);
        x=-1.9; y=-0.9; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-2.9; y=-0.8; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-4.9; y=-0.7; radius =0.07;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(12.5, 2.5, 0.5);
        x=-5.9; y=-0.9; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-6.9; y=-0.7; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-7.9; y=-0.8; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=7.9; y=-0.8; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=7.3; y=-0.7; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 0.0, 0.0);
        x=6.3; y=-0.5; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=5.8; y=-0.5; radius =0.08;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=3.3; y=-0.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=2.3; y=-0.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(3.9, 1.6, 1.5);
        x=1.3; y=-0.9; radius =0.04;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 0.5);
        x=0.3; y=-0.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

//--------------------SMALL CIRCLES2---------------------------------------



     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(3.5, 1.5, 1.5);
        x=-0.9; y=-0.2; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.0, 1.0, 1.0);
        x=-1.7; y=-0.1; radius =0.07;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-2.9; y=0.3; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-3.9; y=0.2; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5,0.0 , 0.5);
        x=-4.9; y=0.4; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-5.9; y=0.4; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-6.9; y=0.2; radius =0.07;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(0.5, 0.5, 1.5);
        x=7.9; y=0.0; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=8.3; y=0.2; radius =0.07;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=9.3; y=0.5; radius =0.07;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=10.8; y=0.5; radius =0.08;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=2.3; y=0.3; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=3.6; y=0.2; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(3.9, 1.6, 1.5);
        x=4.3; y=0.3; radius =0.04;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 0.5);
        x=5.3; y=0.4; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

//--------------------SMALL CIRCLES3---------------------------------------



     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-0.9; y=1.2; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.0, 1.0, 0.0);
        x=-1.9; y=1.1; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 0.0);
        x=-2.9; y=1.0; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-4.9; y=1.2; radius =0.07;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(12.5, 2.5, 0.5);
        x=-5.9; y=1.1; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 0.0, 0.0);
        x=-6.9; y=1.2; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-7.9; y=0.8; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=7.9; y=0.7; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=7.3; y=0.8; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.0, 0.0);
        x=6.3; y=0.9; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.7, 1.5);
        x=5.8; y=0.8; radius =0.08;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=3.3; y=0.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=2.3; y=0.8; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(3.9, 1.6, 1.5);
        x=1.3; y=0.9; radius =0.04;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 0.5);
        x=0.3; y=1.1; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
    glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=0.0; y=0.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-------------------------------------------------------------
//-----------------------------------------------------------
    glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=0.2; y=0.3; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
    glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 0.0, 0.0);
        x=0.8; y=0.0; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

//--------------------SMALL CIRCLES3---------------------------------------



     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 0.0, 0.0);
        x=-0.9; y=1.8; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.0, 1.0, 1.0);
        x=-1.9; y=1.7; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-2.9; y=1.8; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-3.9; y=1.9; radius =0.07;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

     glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(12.5, 2.5, 0.5);
        x=-4.9; y=1.9; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-5.9; y=1.8; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-6.9; y=1.8; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=-7.9; y=1.5; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=5.3; y=1.7; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 0.0, 0.0);
        x=-4.3; y=1.5; radius =0.05;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=6.8; y=1.9; radius =0.08;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=4.3; y=1.8; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=5.3; y=0.9; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------

glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(3.9, 1.6, 1.5);
        x=4.1; y=0.8; radius =0.04;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 0.5);
        x=2.3; y=1.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 0.5);
        x=1.7; y=1.6; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 0.5);
        x=2.0; y=1.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 1.5);
        x=3.3; y=1.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 0.5);
        x=8.3; y=1.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 0.5);
        x=9.3; y=1.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 0.5);
        x=10.3; y=-1.0; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.5, 1.5, 1.5);
        x=8.8; y=-1.1; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//-----------------------------------------------------------
glPushMatrix();
        glBegin(GL_TRIANGLE_FAN);
        glColor3f(1.9, 1.6, 2.5);
        x=9.3; y=-0.7; radius =0.06;
        twicePi = 2 * PI;
        glVertex2f(x, y); // center of circle
        for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(
                    x + (radius * cos(i *  twicePi / triangleAmount)) ,
                    y + (radius * sin(i * twicePi / triangleAmount))
                  ); }
        glEnd();
    glPopMatrix();
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

//-----------------------------------------------------------



//-----------------------------------------------------------
    glutSwapBuffers();
}




//-----------------------------TextureFunction------------------------------

void texture (void){

const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };

const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[]    = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };

    glEnable(GL_CULL_FACE);
    glCullFace(GL_BACK);

    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);

    glLightfv(GL_LIGHT0, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);

    glMaterialfv(GL_FRONT, GL_AMBIENT,   mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE,   mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR,  mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);


}

//-----------------------------------------------------------


//--------------------------------  idleFunction  ----------------------------------

void idleFunc (void)
{
    zRotated += 0.1;
    glutPostRedisplay();
}

//----------------------------------  main  ------------------------------------

int main (int argc, char **argv)
{
    glutInit               (&argc, argv);
   glutInitDisplayMode(GLUT_RGB|GLUT_DOUBLE);
    glutInitWindowSize     (800, 600);
    glutInitWindowPosition (0, 0);
    glutCreateWindow       ("20109043");


    glClearColor (0.0, 0.1, 0.2, 0.1);


    glutDisplayFunc (Draw_Spheres);

    glutTimerFunc(0,timer,0);
    glutReshapeFunc (reshapeFunc);
    glutIdleFunc    (idleFunc);

    texture();
    PlaySound(TEXT("music3.mp3"), NULL, SND_SYNC);

    glutSpecialFunc(keyPress);
    glutMainLoop();
}
